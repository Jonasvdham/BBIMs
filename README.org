* BBIMs

Thesis research project into the carbon-removal potential of bio-based
insulation materials (BBIMs)

* Demo

housing scenarios
#+begin_src python
houses_per_year_slow(150000, 27)
houses_per_year_fast(150000, 27)
#+end_src

Large differences between cork / cellulose / stone wool
Francesco: cork is an 'anomaly' in the EcoInvent dataset, high production energy.
#+begin_src python
dataset = make_datasets()
dataset['cork']
dataset['stone wool']
dataset['cellulose']
#+end_src

Plotting them:
#+begin_src python
plot_GWI(['cork', 'cellulose', 'stone wool'], building_scenario='normal', plottype='inst')
plot_GWI(['cork', 'cellulose', 'stone wool'], building_scenario='normal', plottype='cum')
#+end_src

* DLCA

[[file:DLCA.py]]

Notes
- make_dataset assumes positive CO2bio, DLCA assumes negative
- Where did I get the alpha values? They are different from Hoxha e.a. 2020

** Missing data

- EcoInvent: Flax, Hemp, Straw, EPS
- Biogenic CO2: Hemp

** Anomalies

#+begin_src python
df = pd.read_csv("data/Ecoinvent.tsv", sep="\t")
sum(df['kg CO2-eq']<df['kg CO2'])
#+end_src

890 / 5421 rows have higher CO2 than CO2-eq

** TODO

- Write to output file
- Generate better plots (radiative forcing, GWP)
- Decide how to handle tf of interest and time_horizon for construction (i.e.
  consider the impact until 2100 of houses constructed until 2050)
- Check all GHGs are properly taken into account (e.g. CO turns into CO2)
- Gather crop rotation periods
- Include specific radiative forcing per unit mass (Hoxha e.a. 2020):
  - For the CO2, CH4 and N2O the values are respectively:
    - ACO2 = 1.76 × 10–15 Wm–2 kg–1;
    - ACH4 = 1.28 × 10–13 Wm–2 kg–1;
    - AN2O = 3.90 × 10–13 Wm–2 kg–1.
  - the ones from the original matlab file are
    - aCO2 = 0.0018088
    - aCH4 = 0.129957
- check if atmospheric decay functions are correctly being applied.
- check if N20 and CO are accounted for

* Make Dataset

[[file:make_dataset.py]]

Notes
- CO2_bio:
  - Missing hemp
- Check if dataset is correctly read in with dots/commas
- check lifecycle stages which are included now
  - a1-a3 from Ecoinvent.tsv
  - C from carbon content (KBOB)
    - how does this work for non-biobased?
  - D: can make some assumptions

** data

- Ecoinvent straw:
  "Straw {CH}| wheat production, Swiss integrated production, extensive |
  Cut-off, S"
  extensive vs intensive?



** B/C/D

*** End-of-life

- Need to add EoL data from ecoinvent_waste.csv (module C)
- Optional module D benefits from ecoinvent_energy.csv (assuming energy
  recovery / biogas production)
- Start with some simple

*** Module B

- Need to model module B - replacement after functional lifetime.
  - In a dynamic model, module B should also be dynamic. I.e. start a whole new
    product lifecycle.
  - Can only be done after adding modules C & D

- I can use copies of the original dataset for this:

  - The variables seem to remain the same [material, #houses, time_horizon,
    timeframe]? Time might change.
  - Make n copies of the original dataset which EXCLUDES module B


#+begin_src python
n = ceil(building lifetime / product lifetime) - 1
for i in range(n):
    # copy dataset
    # prepend np.zeros((i+1) * product_lifetime)
    # add to original dataset
#+end_src

- e.g. ceil(75 / 50) - 1 = 2  - 1 = 1 -> for replacement during lifetime
- Edge case if building_lt % product_lt == 0
- e.g. ceil(100 / 25) - 1 = 4 - 1 = 3 ->  3 'replacements'
- the copies of the dataset will have i*product_lifetime zeros prepended


**  CO2 issues

*** Prepend 0s to extend emissions

#+begin_src python
# Do I want to prepend 0 rows for the lifetime of the building? Maybe only if they are plant based materials...
dataset = pd.DataFrame(
    np.zeros((MATERIALS[material]["lifetime"], 4)), columns=dataset.columns
).append(dataset, ignore_index=True)
#+end_src

*** CO2bio
It seems the EcoInvent data for BBIMs (CO2) is quite high. I thought biogenic
CO2 might be included? I expect not, as it should just be phase A1-A3 but in
case it needs to be subtracted in make_dataset:

#+begin_src python
# subtract biogenic co2 from kg co2
biogenic = [
    insulation_per_year[i] * MATERIALS[material]["CO2bio"]
    if i < years
    else 0.0
    for i in range(len(insulation_per_year))
]
dataset["kg CO2"] = dataset["kg CO2"] + biogenic
dataset["kg CO2"] = (
    dataset["kg CO2"]
    + np.append(np.zeros(MATERIALS[material]["lifetime"]), biogenic)[
        :timeframe
    ]
)
#+end_src

** TODO

- Look into rounding off of numbers when reading in dataset
- Fix placeholder values for rotation time
  - model N(r/2, r/4) ?
  - check if loop i in range(rotation) works for species with r=0.5
- Remove placeholder values
  - M2 Facades, Rvalue, lambda values
